<?xml version="1.0" encoding="UTF-8"?><testrun name="ArrayListOpCorregitTest" project="ED" tests="17" started="17" failures="1" errors="0" ignored="0">
  <testsuite name="arrayListOp.ArrayListOpCorregitTest" time="0.084" displayname="ArrayListOpCorregitTest" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]">
    <testcase name="testArrayVacio" classname="arrayListOp.ArrayListOpCorregitTest" time="0.006" displayname="Test array vacï¿½o" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[method:testArrayVacio()]"/>
    <testsuite name="testCSV(arrayListOp.ArrayListOpCorregitTest)" time="0.019" displayname="Parametritzat CSVSource" parameters="int,int,int,int,int,int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testCSV(int, int, int, int, int, int)]">
      <testcase name="testCSV" classname="arrayListOp.ArrayListOpCorregitTest" time="0.019" dynamicTest="true" displayname="[1] -1, -2, -3, -4, -5, -3" parameters="int,int,int,int,int,int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testCSV(int, int, int, int, int, int)]/[test-template-invocation:#1]"/>
      <testcase name="testCSV" classname="arrayListOp.ArrayListOpCorregitTest" time="0.001" dynamicTest="true" displayname="[2] 1, 2, -2, -4, -6, -2" parameters="int,int,int,int,int,int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testCSV(int, int, int, int, int, int)]/[test-template-invocation:#2]"/>
      <testcase name="testCSV" classname="arrayListOp.ArrayListOpCorregitTest" time="0.001" dynamicTest="true" displayname="[3] 10, 20, 30, 40, 50, 30" parameters="int,int,int,int,int,int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testCSV(int, int, int, int, int, int)]/[test-template-invocation:#3]"/>
    </testsuite>
    <testsuite name="testValue(arrayListOp.ArrayListOpCorregitTest)" time="0.001" displayname="Parametritzat ValueSource" parameters="int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testValue(int)]">
      <testcase name="testValue" classname="arrayListOp.ArrayListOpCorregitTest" time="0.001" dynamicTest="true" displayname="[1] 1" parameters="int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testValue(int)]/[test-template-invocation:#1]"/>
      <testcase name="testValue" classname="arrayListOp.ArrayListOpCorregitTest" time="0.001" dynamicTest="true" displayname="[2] 2" parameters="int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testValue(int)]/[test-template-invocation:#2]"/>
      <testcase name="testValue" classname="arrayListOp.ArrayListOpCorregitTest" time="0.0" dynamicTest="true" displayname="[3] 3" parameters="int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testValue(int)]/[test-template-invocation:#3]"/>
      <testcase name="testValue" classname="arrayListOp.ArrayListOpCorregitTest" time="0.0" dynamicTest="true" displayname="[4] 4" parameters="int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testValue(int)]/[test-template-invocation:#4]"/>
    </testsuite>
    <testcase name="testArrayNull" classname="arrayListOp.ArrayListOpCorregitTest" time="0.0" displayname="Test array valor null" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[method:testArrayNull()]"/>
    <testsuite name="testFindClosestToAverage(arrayListOp.ArrayListOpCorregitTest)" time="0.0" displayname="Test con CsvFileSource" parameters="java.lang.String,int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testFindClosestToAverage(java.lang.String, int)]">
      <testcase name="testFindClosestToAverage" classname="arrayListOp.ArrayListOpCorregitTest" time="0.0" dynamicTest="true" displayname="[1] 2,2,3,2,2, 2" parameters="java.lang.String,int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testFindClosestToAverage(java.lang.String, int)]/[test-template-invocation:#1]"/>
      <testcase name="testFindClosestToAverage" classname="arrayListOp.ArrayListOpCorregitTest" time="0.001" dynamicTest="true" displayname="[2] 3,3,4,2,3, 3" parameters="java.lang.String,int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testFindClosestToAverage(java.lang.String, int)]/[test-template-invocation:#2]"/>
      <testcase name="testFindClosestToAverage" classname="arrayListOp.ArrayListOpCorregitTest" time="0.0" dynamicTest="true" displayname="[3] 4,4,2,1,5, 4" parameters="java.lang.String,int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testFindClosestToAverage(java.lang.String, int)]/[test-template-invocation:#3]"/>
      <testcase name="testFindClosestToAverage" classname="arrayListOp.ArrayListOpCorregitTest" time="0.0" dynamicTest="true" displayname="[4] 1, 1" parameters="java.lang.String,int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testFindClosestToAverage(java.lang.String, int)]/[test-template-invocation:#4]"/>
      <testcase name="testFindClosestToAverage" classname="arrayListOp.ArrayListOpCorregitTest" time="0.0" dynamicTest="true" displayname="[5] 1,2,3,4,5,6,7,8, 4" parameters="java.lang.String,int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testFindClosestToAverage(java.lang.String, int)]/[test-template-invocation:#5]"/>
      <testcase name="testFindClosestToAverage" classname="arrayListOp.ArrayListOpCorregitTest" time="0.022" dynamicTest="true" displayname="[6] 1,2,3,4,5,6,7,8, 5" parameters="java.lang.String,int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testFindClosestToAverage(java.lang.String, int)]/[test-template-invocation:#6]">
        <failure>
          <expected>5</expected>
          <actual>4</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;5&gt; but was: &lt;4&gt;&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)&#13;
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:527)&#13;
	at arrayListOp.ArrayListOpCorregitTest.testFindClosestToAverage(ArrayListOpCorregitTest.java:43)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)&#13;
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)&#13;
	at java.base/java.util.stream.SliceOps$1$1.accept(SliceOps.java:200)&#13;
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)&#13;
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1845)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)&#13;
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)&#13;
&#13;

        </failure>
      </testcase>
      <testcase name="testFindClosestToAverage" classname="arrayListOp.ArrayListOpCorregitTest" time="0.001" dynamicTest="true" displayname="[7] -127,-3423,-2, -127" parameters="java.lang.String,int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testFindClosestToAverage(java.lang.String, int)]/[test-template-invocation:#7]"/>
      <testcase name="testFindClosestToAverage" classname="arrayListOp.ArrayListOpCorregitTest" time="0.0" dynamicTest="true" displayname="[8] -77, -77" parameters="java.lang.String,int" uniqueid="[engine:junit-jupiter]/[class:arrayListOp.ArrayListOpCorregitTest]/[test-template:testFindClosestToAverage(java.lang.String, int)]/[test-template-invocation:#8]"/>
    </testsuite>
  </testsuite>
</testrun>
